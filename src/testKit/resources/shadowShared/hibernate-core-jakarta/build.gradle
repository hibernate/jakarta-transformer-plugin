plugins {
    id 'java-library'
    id 'org.hibernate.jakarta-transformer'
}

apply from: rootProject.file( 'gradle/jakarta-shadow.gradle' )

jakartaTransformation {
    shadow( project( ':hibernate-core' ) ) {
        runTests()
        withJavadoc()
        withSources()
    }
}

test {
    doFirst {

        getLogger().lifecycle( "############################################################" );
        getLogger().lifecycle( " `{}` task inputs...", path );
        getLogger().lifecycle( "############################################################" );
        inputs.sourceFiles.forEach {
            getLogger().lifecycle( "   [source] -> {}", it.absolutePath )
        }
        inputs.files.forEach {
            getLogger().lifecycle( "   [file] -> {}", it.absolutePath )
        }
        getLogger().lifecycle( "############################################################" );
        getLogger().lifecycle( "" );

        getLogger().lifecycle( "############################################################" );
        getLogger().lifecycle( " `{}` task classpath...", path );
        getLogger().lifecycle( "############################################################" );
        classpath.forEach {
            getLogger().lifecycle("   -> {}", it.getAbsolutePath())
        }
        getLogger().lifecycle( "############################################################" );
        getLogger().lifecycle( "" );

        getLogger().lifecycle( "############################################################" );
        getLogger().lifecycle( " `{}` task testClassesDirs...", path );
        getLogger().lifecycle( "############################################################" );
        testClassesDirs.forEach {
            getLogger().lifecycle( "", it.absolutePath )
        }
        getLogger().lifecycle( "############################################################" );

    }
}

